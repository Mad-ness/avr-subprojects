/*
* DispTiny13C.c
* Created: 09.11.2013 09:40:27
* Author: Volker
* Mikrocontroller :						ATtiny13
*									  -----------
*									 |			 |
*  (/RESET/PCINT5/ADC0/dW) <---PB5---|1			8|--- VCC
*		(PCINT3/CLKI/ADC3) <---PB3---|2			7|---PB2---> (SCK/ADC1/T0/PCINT2)
*			 (PCINT4/ADC2) <---PB4---|3			6|---PB1---> (MISO/AIN1/OC0B/INT0/PCINT1)
*							  GND ---|4			5|---PB0---> (MOSI/AIN0/OC0A/PCINT0)
*									 |			 |
*									  -----------
*/ 

//#define F_CPU 9600000UL
#define F_CPU 1200000LU
#include <avr/io.h>

static int8_t TubeTab[] = { 0x3f,0x06,0x5b,0x4f,
							0x66,0x6d,0x7d,0x07,
							0x7f,0x6f,0x77,0x7c,
							0x39,0x5e,0x79,0x71};//0~9,A,b,C,d,E,F
uint8_t Cmd_SetData;
uint8_t Cmd_SetAddr;
uint8_t Cmd_DispCtrl;

#define ClkPin 3
#define DataPin 4
#define ADDR_AUTO  0x40
//#define ADDR_FIXED 0x44
#define ADDR_FIXED 0xC0
#define ADDR_BRIGH 0x80

//To take effect the next time it displays.
void TM1637_set(uint8_t brightness,uint8_t SetData,uint8_t SetAddr) {
	Cmd_SetData = SetData;
	Cmd_SetAddr = SetAddr;
	//Cmd_DispCtrl = 0x88 + brightness;//Set the brightness and it takes effect the next time it displays.
    Cmd_DispCtrl = (0x0F & brightness) + ADDR_BRIGH;
}

void TM1637_writeByte(int8_t wr_data) {
	uint8_t i;
	uint8_t count1 = 0;
	for(i=0;i<8;i++)        //send 8bit data
	{
		PORTB &= ~(1<<ClkPin);
		//digitalWrite(Clkpin,LOW);
		if (wr_data & 0x01) PORTB |= (1<<DataPin);
		else PORTB &= ~(1<<DataPin);
		//if (wr_data & 0x01) digitalWrite(Datapin,HIGH);//LSB first
		//else digitalWrite(Datapin,LOW);
		wr_data >>= 1;
		PORTB |= (1<<ClkPin);
		//digitalWrite(Clkpin,HIGH);
	}
	PORTB &= ~(1<<ClkPin);										// auf ACK warten
	//digitalWrite(Clkpin,LOW); //wait for the ACK
	PORTB |= (1<<DataPin);
	//digitalWrite(Datapin,HIGH);
	PORTB |= (1<<ClkPin);
	//digitalWrite(Clkpin,HIGH);
	DDRB &= ~(1<<DataPin);
	//pinMode(Datapin,INPUT);
	while (PINB & (1<<DataPin)) {
	//while(digitalRead(Datapin))
		count1 = count1+1;
		if(count1 == 10)//
		{
			DDRB |= (1<<DataPin);
			//pinMode(Datapin,OUTPUT);
			PORTB &= ~(1<<DataPin);
			//digitalWrite(Datapin,LOW);
			count1 =0;
		}
		DDRB &= ~(1<<DataPin);
		//pinMode(Datapin,INPUT);
	}
	DDRB |= (1<<DataPin);
	//pinMode(Datapin,OUTPUT);	
}

int8_t TM1637_coding(int8_t DispData) {
	uint8_t PointData;
	//if(_PointFlag == POINT_ON)PointData = 0x80;
	//else PointData = 0;
	PointData = 0;												// erstmal ":" aus
	if (DispData == 0x7f) DispData = 0x00 + PointData;			// The bit digital tube off
	else DispData = TubeTab[DispData] + PointData;
	return DispData;
}

//send start signal to TM1637
void TM1637_start(void) {
	PORTB |= (1<<ClkPin);										// ClkPin High
	PORTB |= (1<<DataPin);										// DataPin High
	PORTB &= ~(1<<ClkPin);										// ClkPin Low
	PORTB &= ~(1<<DataPin);										// DataPin Low
}

//End of transmission
void TM1637_stop(void) {
	PORTB &= ~(1<<ClkPin);										// ClkPin Low
	PORTB &= ~(1<<DataPin);										// DataPin Low
	PORTB |= (1<<ClkPin);										// ClkPin High
	PORTB |= (1<<DataPin);										// DataPin High
}

void TM1637_display(uint8_t BitAddr,int8_t DispData) {
	int8_t SegData;
	SegData = TM1637_coding(DispData);
	TM1637_start();												//start signal sent to TM1637 from MCU
	TM1637_writeByte(ADDR_FIXED);
	TM1637_stop();
	TM1637_start();
	TM1637_writeByte(BitAddr|0xc0);
	TM1637_writeByte(SegData);
	TM1637_stop();
	TM1637_start();
	TM1637_writeByte(Cmd_DispCtrl);
	TM1637_stop();
}

void TM1637_clear(void) {
	TM1637_display(0x00,0x7f);
	TM1637_display(0x01,0x7f);
	TM1637_display(0x02,0x7f);
	TM1637_display(0x03,0x7f);
}

void TM1637_init(void) {
	TM1637_clear();
}

int main(void) {
	DDRB |= 0b00011100;										// PB3 und PB4 als Output
	TM1637_set(2,0,0);
	TM1637_init();
	TM1637_display(0x00,1);
	TM1637_display(0x01,2);
	TM1637_display(0x03,3);
	TM1637_display(0x04,4);
	while(1) {
	}
}

